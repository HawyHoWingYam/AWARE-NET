name: Intelligent Branch Management

on:
  push:
    branches-ignore:
      - main
      - master
      - develop
  pull_request:
    types: [closed]
  schedule:
    # Daily cleanup at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Branch management action'
        required: true
        type: choice
        options:
          - 'cleanup-stale'
          - 'analyze-branches'
          - 'create-from-issue'
      issue_number:
        description: 'Issue number (for create-from-issue)'
        required: false
      days_threshold:
        description: 'Days threshold for stale branches'
        required: false
        default: '14'

env:
  DEFAULT_BRANCH: master
  STALE_DAYS: 14

jobs:
  branch-validation:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate branch naming
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Validating branch name: $BRANCH_NAME"
          
          # Valid prefixes based on project conventions
          VALID_PREFIXES="feature/|fix/|hotfix/|refactor/|docs/|test/|chore/"
          
          if [[ ! "$BRANCH_NAME" =~ ^($VALID_PREFIXES) ]]; then
            echo "❌ Invalid branch name: $BRANCH_NAME"
            echo "Valid prefixes are: feature/, fix/, hotfix/, refactor/, docs/, test/, chore/"
            
            # Create issue for branch naming violation
            gh issue create \
              --title "🏷️ Branch Naming Convention Violation" \
              --body "Branch \`$BRANCH_NAME\` doesn't follow naming conventions.

**Current branch**: \`$BRANCH_NAME\`
**Expected format**: \`prefix/description\`

**Valid prefixes**:
- \`feature/\` - New features
- \`fix/\` - Bug fixes  
- \`hotfix/\` - Critical fixes
- \`refactor/\` - Code refactoring
- \`docs/\` - Documentation updates
- \`test/\` - Test improvements
- \`chore/\` - Maintenance tasks

**Example**: \`feature/stage2-genconvit-optimization\`

Please rename your branch following the conventions." \
              --label "branch-naming,documentation" \
              --assignee "${{ github.actor }}"
              
            exit 1
          else
            echo "✅ Branch name follows conventions"
          fi
          
      - name: Check branch purpose alignment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          
          # Extract component from branch name
          if [[ "$BRANCH_NAME" =~ stage1 ]]; then
            echo "COMPONENT=stage1" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ stage2 ]]; then
            echo "COMPONENT=stage2" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" =~ preprocess ]]; then
            echo "COMPONENT=preprocessing" >> $GITHUB_ENV
          else
            echo "COMPONENT=general" >> $GITHUB_ENV
          fi
          
          echo "Branch categorized as: $COMPONENT"

  cleanup-merged-branches:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Delete merged branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          
          # Don't delete protected branches
          if [[ "$BRANCH_NAME" =~ ^(master|main|develop)$ ]]; then
            echo "Skipping protected branch: $BRANCH_NAME"
            exit 0
          fi
          
          echo "Deleting merged branch: $BRANCH_NAME"
          
          # Delete remote branch
          gh api repos/${{ github.repository }}/git/refs/heads/$BRANCH_NAME -X DELETE || true
          
          # Comment on PR about cleanup
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "🧹 **Automatic Cleanup**

Branch \`$BRANCH_NAME\` has been automatically deleted after merge.

This helps keep the repository clean and organized. The branch history is preserved in this merged PR."

  stale-branch-cleanup:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'cleanup-stale')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Find stale branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DAYS_THRESHOLD="${{ github.event.inputs.days_threshold || env.STALE_DAYS }}"
          CUTOFF_DATE=$(date -d "-${DAYS_THRESHOLD} days" '+%Y-%m-%d')
          
          echo "Finding branches older than $DAYS_THRESHOLD days (before $CUTOFF_DATE)"
          
          # Get all remote branches with last commit date
          git for-each-ref --format='%(refname:short)|%(committerdate:short)|%(authorname)' refs/remotes/origin \
            | grep -v "origin/$DEFAULT_BRANCH" \
            | grep -v "origin/HEAD" > all_branches.txt
          
          # Find stale branches
          while IFS='|' read -r branch date author; do
            branch_name=${branch#origin/}
            
            if [[ "$date" < "$CUTOFF_DATE" ]]; then
              echo "Stale branch found: $branch_name (last commit: $date by $author)"
              echo "$branch_name|$date|$author" >> stale_branches.txt
            fi
          done < all_branches.txt
          
          if [ ! -f stale_branches.txt ]; then
            echo "No stale branches found"
            exit 0
          fi
          
          # Create issue for stale branches
          STALE_LIST=$(cat stale_branches.txt | while IFS='|' read -r branch date author; do
            echo "- \`$branch\` - Last commit: $date by $author"
          done)
          
          gh issue create \
            --title "🧹 Stale Branch Cleanup Report" \
            --body "## Stale Branches Detected

The following branches haven't been updated in more than $DAYS_THRESHOLD days:

$STALE_LIST

## Recommended Actions
1. **Review each branch** - Check if work is still needed
2. **Create PR if ready** - Merge valuable changes
3. **Delete if obsolete** - Clean up abandoned work
4. **Contact authors** - For branches with unclear status

## Automatic Actions
- Branches will be automatically deleted in 7 days if no activity
- Authors have been notified via @ mentions
- Protected branches are excluded from cleanup

_This issue was created by the automated branch management system._" \
            --label "maintenance,branch-cleanup" \
            --assignee "@me"
          
          # Store stale branches for potential deletion
          cp stale_branches.txt /tmp/stale_branches_$(date +%Y%m%d).txt || true

  branch-analysis:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'analyze-branches'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze branch patterns
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## Branch Analysis Report" > analysis.md
          echo "" >> analysis.md
          
          # Count branches by type
          echo "### Branch Distribution" >> analysis.md
          git branch -r | grep -v HEAD | sed 's/origin\///' | while read branch; do
            echo "$branch"
          done | sed 's/\/.*$//' | sort | uniq -c | sort -rn | while read count prefix; do
            echo "- **$prefix**: $count branches" >> analysis.md
          done
          
          echo "" >> analysis.md
          
          # Active vs stale branches
          TOTAL_BRANCHES=$(git branch -r | grep -v HEAD | wc -l)
          RECENT_BRANCHES=$(git for-each-ref --format='%(committerdate:short)' refs/remotes/origin | \
            awk -v date="$(date -d '-7 days' '+%Y-%m-%d')" '$1 >= date' | wc -l)
          STALE_BRANCHES=$((TOTAL_BRANCHES - RECENT_BRANCHES))
          
          echo "### Activity Summary" >> analysis.md
          echo "- **Total branches**: $TOTAL_BRANCHES" >> analysis.md
          echo "- **Active (< 7 days)**: $RECENT_BRANCHES" >> analysis.md
          echo "- **Stale (> 7 days)**: $STALE_BRANCHES" >> analysis.md
          echo "" >> analysis.md
          
          # Most active contributors
          echo "### Top Contributors" >> analysis.md
          git for-each-ref --format='%(authorname)' refs/remotes/origin | \
            sort | uniq -c | sort -rn | head -5 | while read count author; do
            echo "- **$author**: $count branches" >> analysis.md
          done
          
          # Create issue with analysis
          gh issue create \
            --title "📊 Branch Analysis Report - $(date '+%Y-%m-%d')" \
            --body-file analysis.md \
            --label "analytics,maintenance"

  create-branch-from-issue:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'create-from-issue'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create branch from issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Issue number is required"
            exit 1
          fi
          
          # Get issue details
          ISSUE_DATA=$(gh issue view $ISSUE_NUMBER --json title,labels,body)
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          ISSUE_LABELS=$(echo "$ISSUE_DATA" | jq -r '.labels[].name' | tr '\n' ' ')
          
          # Determine branch prefix based on labels
          if echo "$ISSUE_LABELS" | grep -q "bug"; then
            PREFIX="fix"
          elif echo "$ISSUE_LABELS" | grep -q "feature"; then
            PREFIX="feature"
          elif echo "$ISSUE_LABELS" | grep -q "documentation"; then
            PREFIX="docs"
          else
            PREFIX="feature"
          fi
          
          # Create branch name
          BRANCH_NAME="$PREFIX/issue-$ISSUE_NUMBER-$(echo "$ISSUE_TITLE" | \
            tr '[:upper:]' '[:lower:]' | \
            sed 's/[^a-z0-9]/-/g' | \
            sed 's/--*/-/g' | \
            sed 's/^-\|-$//g' | \
            cut -c1-50)"
          
          echo "Creating branch: $BRANCH_NAME"
          
          # Create and push branch
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"
          
          # Comment on issue
          gh issue comment $ISSUE_NUMBER \
            --body "🌿 **Branch Created**

Branch \`$BRANCH_NAME\` has been created for this issue.

**Next steps**:
1. Checkout the branch: \`git checkout $BRANCH_NAME\`
2. Implement the changes
3. Create a pull request when ready

The branch follows project naming conventions and is linked to this issue."
          
          echo "Branch created successfully: $BRANCH_NAME"